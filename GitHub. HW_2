Т.к. у нас новое домашнее задание, поэтому, чтобы не было путаницы в последующем, создадим новую папку "GitHub" на внешнем репозитории и синхронизируем его с внутренним:
    1) Создаём новый внешний репозиторий:
      • во вкладке Repositories кликнуть по кнопке "New" (откроется окно "Create a new repository")
      • в поле "Repository name" написать имя нового репозитория "GitHub"
      • проверить радиокнопку "Public" (она по умолчанию активна, оставляем как есть)
      • поставить галочку в чекбокса "Add a README file"
      • нажать зелёную кнопку внизу "Create repository" (создался новый репозиторий)
      • зайти в только что созданный репозиторий "GitHub"
      • нажать на кнопку "Code"
      • выбрать вкладку HTTPS
      • скопировать ссылку над текстом "Use Git or checkout with SVN using the web URL."

    2) Перейти на внутренний репозиторий, открыть GitBash (я открываю сдедующим образом: захожу на диск D и кликаю правой кнопкой мыши по папке "Рабочая папка по GitBash", открывается выпадающее меню, где надо выбрать "GitBash Here")
      • синхронизировать репозитории
        git pull
      • перейти в папку "GitBash" на внутреннем репозитории
        cd gitbash (откроется локальный репозиторий "GitBash", все действия необходимо выполнять в нём)

1. На локальном репозитории сделать ветки для:
  - Postman
  - Jmeter
  - CheckLists
  - Bag Reports
  - SQL
  - Charles
  - Mobile testing

    - git branch Postman
    - git branch Jmeter
    - git branch CheckLists
    - git branch Bag Reports
    - git branch SQL
    - git branch Charles
    - git branch Mobile testing

Проверить наличие всех веток:
  git branch

2. Запушить все ветки на внешний репозиторий:
  git push origin
  
3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта:
   • cat > bug_report_structure.txt (откроется текстовый редактор cat в главном окне GitBash)
   • структура баг-репорта, которую я написала здесь: https://github.com/MariyaGribanova/GitHub/blob/Bag_Reports/bug_report_structure.txt
   • CTRL+C - выйти из реактора cat

4. Запушить структуру баг-репорта на внешний репозиторий:
   • git add bug_report_structure.txt (команда "git add" подготавливает выбранный файл bug_report_structure.txt для коммита)
   • git commit -m "bug_report_example" (команда "git commit" сохраняет версию файл bug_report_structure.txt, "-m" и "bug_report_example" в связке работают как подпись версии закоммиченного документа)
   • git push (отправляет файл bug_report_structure.txt на внешний репозиторий)

5. Вмержить ветку Bag Reports в Main:
   • чтобы "вмержить" что-то во что-то, необходимо сначала перейти на ветку В КОТОРУЮ мы будем вливать:
    git checkout main (переход на ветку main)
   • затем после команды git merge пишем название ветки С КОТОРОЙ будем вливать:
    git merge Bag_Reports -m "merge_bag_reports" ("-m" и "merge_bag_reports" в связке - это подпись вливания)
    
6. Запушить main на внешний репозиторий:
    git push -u origin main
    
7. В локальной ветке CheckLists набросать структуру чек листа:
   • cat > checklist_example.txt (откроется текстовый редактор cat в главном окне GitBash)
   • структура чек-листа, которую я написала здесь: https://github.com/MariyaGribanova/GitHub/blob/CheckLists/checklist_example.txt
   • CTRL+C - выйти из реактора cat

8. Запушить структуру на внешний репозиторий:
   • git add checklist_example.txt (команда "git add" подготавливает выбранный файл checklist_example.txt для коммита)
   • git commit -m "add_checklist_example" (команда "git commit" сохраняет версию файл checklist_example.txt, "-m" и "add_checklist_example" в связке работают как подпись версии закоммиченного документа)
   • git push (отправляет файл checklist_example.txt на внешний репозиторий)

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main:
   • на внешнем репозитории зайти в папку GitHub с которой мы работаем
   • нажать в хедере кнопку "Pull requests" (откроется новая страница с сообщением "ad had recent pushes ... minutes ago")
   • жмём рядом с сообщением кнопку "Compare & pull request" (таким образом, ты создаём запрос на слияние, этот запрос перед финальным пушем должен смотреть разработчик или старший автотестер, чтобы избежать лишних или ошибочных слияний)
   • если запрос на слияние подтвердится, нажимаем "Create pull request", тем самым, подтверждаем запрос и производим слияние

10. Синхронизировать Внешнюю и Локальную ветки Main:
   • возвращаемя на локальный репозиторий GitBash
   • git checkout main - переходим на ветку main
   • git fetch (команда выводит список того, что будет слияться)
   • git pull (команда "стягивает" изменения с удалённой ветки на локальную)
    
